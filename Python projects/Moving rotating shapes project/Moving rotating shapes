import pygame
import random
from pygame.locals import *

class Circle:
    def __init__(self, screen_width, screen_height, circle_size):
        """
        Initializes a Circle object.

        Parameters:
            screen_width (int): The width of the game screen.
            screen_height (int): The height of the game screen.
            circle_size (int): The size of the circle.

        Attributes:
            rect (pygame.Rect): The rectangular area occupied by the circle.
            velocity (tuple): The velocity of the circle in (x, y) directions.
        """
        self.rect = pygame.Rect(
            random.randint(0, screen_width - circle_size),
            random.randint(0, screen_height - circle_size),
            circle_size,
            circle_size
        )
        self.velocity = (
            random.randint(8, 12),
            random.randint(8, 12)
        )

def main():
    """
    The main function that runs the game.
    """
    pygame.init()

    # Set up the game screen
    screen_width, screen_height = 800, 600
    screen = pygame.display.set_mode((screen_width, screen_height))
    pygame.display.set_caption("Moving Rotating Shapes")

    # Set up color constants
    BLACK = (0, 0, 0)
    RED = (255, 0, 0)
    GREEN = (0, 255, 0)
    WHITE = (255, 255, 255)

    # Set up font for displaying text
    font = pygame.font.Font(None, 36)

    # Set up the prompt for user input
    prompt_text = "Enter the number of squares:"
    prompt_surface = font.render(prompt_text, True, WHITE)
    prompt_rect = prompt_surface.get_rect(center=(screen_width // 2, 200))

    # Set up the user input box
    input_rect = pygame.Rect(250, 250, 300, 40)
    input_color_inactive = pygame.Color('lightskyblue3')
    input_color_active = pygame.Color('dodgerblue2')
    input_color = input_color_inactive
    user_input = ''
    font_input = pygame.font.Font(None, 36)
    input_active = False

    # Main loop for getting user input
    running = True
    input_accepted = False
    clock = pygame.time.Clock()

    while running:
        for event in pygame.event.get():
            # Handle events such as quitting, key presses, and mouse clicks
            if event.type == QUIT:
                running = False
            elif event.type == KEYDOWN:
                # Handle key presses
                if event.key == K_RETURN:
                    try:
                        num_rectangles = int(user_input)
                        input_accepted = True
                    except ValueError:
                        user_input = ""
                elif event.key == K_BACKSPACE:
                    user_input = user_input[:-1]
                else:
                    user_input += event.unicode
            elif event.type == MOUSEBUTTONDOWN:
                # Handle mouse clicks for input box activation
                if input_rect.collidepoint(event.pos):
                    input_active = not input_active
                else:
                    input_active = False

        # Draw the screen, prompt, and input box
        screen.fill(BLACK)
        screen.blit(prompt_surface, prompt_rect)

        if input_active:
            input_color = input_color_active
        else:
            input_color = input_color_inactive
        pygame.draw.rect(screen, input_color, input_rect, 2)

        txt_surface = font_input.render(user_input, True, WHITE)
        width = max(200, txt_surface.get_width() + 10)
        input_rect.w = width
        screen.blit(txt_surface, (input_rect.x + 5, input_rect.y + 5))

        pygame.display.flip()

        # Break the loop if user input is accepted
        if input_accepted:
            break

        clock.tick(60)

    # Convert user input to integer
    num_rectangles = int(user_input)

    # Set up the list of rectangles
    rectangles = []

    # Define the size of all rectangles
    rect_size = 30

    # Generate random positions for each rectangle
    for _ in range(num_rectangles):
        x = random.randint(0, screen_width - rect_size)
        y = random.randint(0, screen_height - rect_size)
        rectangles.append({"rect": pygame.Rect(x, y, rect_size, rect_size), "hits": 0})

    # Set up initial velocities for each rectangle
    velocities = [(random.randint(1, 3), random.randint(1, 3)) for _ in range(num_rectangles)]

    # Create the circle using the Circle class
    circle_size = 30
    circle = Circle(screen_width, screen_height, circle_size)

    # Number of hits required for a rectangle to disappear
    hits_required = 2

    # Initialize score
    score = 0

    def update_circle(circle):
        """
        Update the position of the circle based on its velocity.

        Parameters:
            circle (Circle): The Circle object representing the moving circle.
        """
        circle.rect.x += circle.velocity[0]
        circle.rect.y += circle.velocity[1]

        # Ensure the circle stays within the screen boundaries
        circle.rect.x = max(0, min(circle.rect.x, screen_width - circle_size))
        circle.rect.y = max(0, min(circle.rect.y, screen_height - circle_size))

        # Check if the circle is close to the screen edges
        if circle.rect.x <= 0 or circle.rect.x >= screen_width - circle_size:
            circle.velocity = (-circle.velocity[0], circle.velocity[1])  # Change x-direction

        if circle.rect.y <= 0 or circle.rect.y >= screen_height - circle_size:
            circle.velocity = (circle.velocity[0], -circle.velocity[1])  # Change y-direction

        # Draw the circle
        pygame.draw.ellipse(screen, GREEN, circle.rect)

    # Run the game loop
    while running:
        for event in pygame.event.get():
            # Handle events such as quitting
            if event.type == QUIT:
                running = False

        # Clear the screen
        screen.fill(BLACK)

        # Update and draw each rectangle
        for rect_info in rectangles:
            rect = rect_info["rect"]
            hits = rect_info["hits"]

            # Update rectangle position based on velocity
            rect.x += int(velocities[rectangles.index(rect_info)][0])
            rect.y += int(velocities[rectangles.index(rect_info)][1])

            # Ensure the rectangle stays within the screen boundaries
            rect.x = max(0, min(rect.x, screen_width - rect_size))
            rect.y = max(0, min(rect.y, screen_height - rect_size))

            # Check if the rectangle is close to the screen edges
            if rect.x <= 0 or rect.x >= screen_width - rect_size:
                velocities[rectangles.index(rect_info)] = (
                    -velocities[rectangles.index(rect_info)][0],
                    velocities[rectangles.index(rect_info)][1]
                )  # Change x-direction

            if rect.y <= 0 or rect.y >= screen_height - rect_size:
                velocities[rectangles.index(rect_info)] = (
                    velocities[rectangles.index(rect_info)][0],
                    -velocities[rectangles.index(rect_info)][1]
                )  # Change y-direction

            # Draw the rectangle if it's still visible
            if hits < hits_required:
                pygame.draw.rect(screen, RED, rect)

            # Check for collision between circle and rectangle
            if rect.colliderect(circle.rect):
                rect_info["hits"] += 1  # Increment hit count for the current rectangle

                # Shrink the rectangle size by half after the first hit
                if rect_info["hits"] == 1:
                    rect.size = (rect.width // 2, rect.height // 2)

                # Remove the rectangle from the list if it has been hit enough times
                if rect_info["hits"] == hits_required:
                    rectangles.remove(rect_info)
                    # Update the score
                    score += 1

        # Draw the score
        score_text = font.render(f"Score: {score}", True, WHITE)
        screen.blit(score_text, (10, 10))

        # Update and draw the circle
        update_circle(circle)

        # If all rectangles are gone, display "You win"
        if not rectangles:
            win_text = font.render("You win!", True, GREEN)
            win_text = pygame.transform.scale(win_text, (200, 50))
            win_rect = win_text.get_rect(center=(screen_width // 2, screen_height // 2))
            screen.blit(win_text, win_rect)
            # Hide the circle
            circle.rect = pygame.Rect(0, 0, 0, 0)

        # Update the display
        pygame.display.flip()

        # Cap the frame rate
        clock.tick(60)

    # Quit Pygame
    pygame.quit()

if __name__ == "__main__":
    main()
